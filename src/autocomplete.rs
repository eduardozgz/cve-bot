use crate::{models::vendors::Vendor, Context};
use diesel::{sql_types};
use diesel_async::RunQueryDsl; 


async fn autocomplete<'a>(ctx: Context<'_>, table_name: &str, current_search: &'a str) -> Vec<String> {
    let ctx_data = ctx.data();
    let mut conn = ctx_data.opencve_db_pool.get().await.unwrap();

    let mut current_seach: Vec<&str> = current_search
        .split(",")
        .map(|str| str.trim())
        .collect::<Vec<_>>();
    let partial = current_seach.pop().unwrap();

    let results = diesel::sql_query(format!("SELECT * FROM {table_name} WHERE name LIKE '%' || $1 || '%' LIMIT 5"))
        .bind::<sql_types::Text, _>(partial)
        .load::<Vendor>(&mut conn)
        .await
        .unwrap();

    results
        .iter()
        .map(|vendor| {
            let name = vendor.name.to_owned();
            let mut value = current_seach.clone();
            value.push(&name);
            let value = value.join(", ");
            value
        })
        .collect::<Vec<_>>()
}

pub async fn vendor<'a>(ctx: Context<'_>, partial: &'a str) -> Vec<String> {
    autocomplete(ctx, "vendors", partial).await
}

pub async fn product<'a>(ctx: Context<'_>, partial: &'a str) -> Vec<String> {
    autocomplete(ctx, "products", partial).await
}
