use diesel::prelude::*;
use diesel_async::RunQueryDsl;
use poise::serenity_prelude::{self as serenity, Mentionable};

use crate::{
    models::{
        channel_config::{ChannelConfig, NewChannelConfig},
        guild_config::GuildConfig,
    },
    opencve_frontend::{OpenCVEFrontend, COOL_CVE_EXAMPLE},
    schema::{channel_config, guild_config},
    Context, Error,
};

/// Sets the URL of the frontend used to point for more information
#[poise::command(
    slash_command,
    guild_only,
    required_permissions = "ADMINISTRATOR",
    rename = "set-opencve-frontend",
    ephemeral
)]
pub async fn command(
    ctx: Context<'_>,
    #[description = "New URL used to point for more information when sending alerts"] url: String,
    #[description = "Sets the URL for the specified channel"] channel: Option<
        serenity::GuildChannel,
    >,
) -> Result<(), Error> {
    let ctx_data = ctx.data();
    let mut database_connection = ctx_data.db_pool.get().await?;
    let target: String;
    let opencve_frontend: OpenCVEFrontend;
    let guild_id = ctx.guild_id().unwrap().to_string();

    if channel.is_some() {
        let channel = channel.unwrap();
        let channel_id = &channel.id.to_string();

        ChannelConfig::load(channel_id, &guild_id, &mut database_connection).await?;

        let new_channel_config = NewChannelConfig {
            id: &channel_id,
            guild_id: &guild_id,
            opencve_frontend_url: Some(&url),
        };

        diesel::insert_into(channel_config::table)
            .values(&new_channel_config)
            .on_conflict(channel_config::id)
            .do_update()
            .set(&new_channel_config)
            .execute(&mut *database_connection)
            .await?;

        target = channel.mention().to_string();
        opencve_frontend =
            OpenCVEFrontend::new(None, Some(&url), &ctx_data.config.opencve_default_frontend);
    } else {
        GuildConfig::load(&guild_id, &mut database_connection).await?;

        diesel::update(guild_config::table)
            .filter(guild_config::id.eq(&guild_id))
            .set(guild_config::opencve_frontend_url.eq(Some(&url)))
            .execute(&mut *database_connection)
            .await?;

        target = String::from("all channels in this server");
        opencve_frontend =
            OpenCVEFrontend::new(Some(&url), None, &ctx_data.config.opencve_default_frontend);
    }

    ctx.send(|b| {
        b.content(format!(
        "The new OpenCVE base url for {target} is {url}\n\nExample of a CVE with this base url: {}",
        opencve_frontend.get_cve_url(COOL_CVE_EXAMPLE)
    ))
    })
    .await?;

    Ok(())
}
