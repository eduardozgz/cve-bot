mod autocomplete;
mod commands;
pub mod config;
pub(crate) mod models;
pub mod opencve_frontend;
mod paginate;
pub(crate) mod schema;
mod utils;

use config::Config;
use diesel_async::pooled_connection::deadpool::Pool;
use diesel_async::pooled_connection::AsyncDieselConnectionManager;
use diesel_async::AsyncPgConnection;
use poise::serenity_prelude as serenity;

// Types used by all command functions
pub type Error = Box<dyn std::error::Error + Send + Sync>;
pub type Context<'a> = poise::Context<'a, Data, Error>;

pub struct Data {
    opencve_db_pool: deadpool::managed::Pool<AsyncDieselConnectionManager<AsyncPgConnection>>,
    db_pool: deadpool::managed::Pool<AsyncDieselConnectionManager<AsyncPgConnection>>,
    config: Config,
}

pub async fn start_bot(config: Config) -> () {
    let options = poise::FrameworkOptions {
        commands: vec![
            commands::set_opencve_frontend(),
            commands::subscribe(),
            commands::unsubscribe(),
            commands::see_settings(),
        ],
        on_error: |error| Box::pin(on_error(error)),
        ..Default::default()
    };

    poise::Framework::builder()
        .token(config.discord_token.to_owned())
        .setup(move |ctx, ready, framework| {
            Box::pin(async move {
                println!(
                    "Ready, logged in as {}#{}",
                    ready.user.name, ready.user.discriminator
                );

                let commands = &framework.options().commands;

                // TODO: if everything has been already registered
                match config.guild_to_deploy_application_commands {
                    Some(guild_id) => {
                        println!("Registering commands to guild {}", guild_id);
                        poise::builtins::register_in_guild(ctx, commands, guild_id).await?;
                        println!("Registering commands done");
                    }
                    None => {
                        println!("Registering commands globally");
                        poise::builtins::register_globally(ctx, commands).await?;
                        println!("Registering commands done");
                    }
                }

                let db_config =
                    AsyncDieselConnectionManager::<diesel_async::AsyncPgConnection>::new(
                        &config.database_url,
                    );
                let db_pool = Pool::builder(db_config).build()?;

                let opencve_db_config = AsyncDieselConnectionManager::<
                    diesel_async::AsyncPgConnection,
                >::new(&config.opencve_database_url);
                let opencve_db_pool = Pool::builder(opencve_db_config).build()?;

                Ok(Data {
                    opencve_db_pool,
                    db_pool,
                    config,
                })
            })
        })
        .options(options)
        .intents(serenity::GatewayIntents::GUILD_INTEGRATIONS)
        .run_autosharded()
        .await
        .unwrap()
}

async fn on_error(error: poise::FrameworkError<'_, Data, Error>) {
    // TODO: improve error handling, generate random UUID and append it to the sent embed and stderr for easier debugging
    match error {
        poise::FrameworkError::Setup { error, .. } => {
            panic!("Failed to start the bot: {:?}", error)
        }
        poise::FrameworkError::Command { error, ctx } => {
            eprintln!("Error in command `{}`: {:?}", ctx.command().name, error);
        }
        error => {
            if let Err(e) = poise::builtins::on_error(error).await {
                eprintln!("Error while handling error: {}", e)
            }
        }
    }
}
