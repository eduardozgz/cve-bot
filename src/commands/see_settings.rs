use crate::{
    models::{
        channel_config::{ChannelConfig, ChannelSubscription, SubscriptionKind},
        guild_config::GuildConfig,
    },
    opencve_frontend::{self, COOL_CVE_EXAMPLE},
    paginate,
    schema::{channel_config, channel_subscription},
    utils, Context, Error,
};
use diesel::prelude::*;
use diesel_async::RunQueryDsl;
use poise::serenity_prelude::CreateEmbed;

/// See all settings for this server and its channels
#[poise::command(
    slash_command,
    guild_only,
    required_permissions = "ADMINISTRATOR",
    rename = "see-settings"
)]
pub async fn command(ctx: Context<'_>) -> Result<(), Error> {
    let ctx_data = ctx.data();
    let guild_id = ctx.guild_id().unwrap().to_string();
    let mut database_connection = ctx_data.db_pool.get().await?;
    let mut pages: Vec<CreateEmbed> = vec![];

    let guild_config_data = GuildConfig::load(&guild_id, &mut database_connection).await?;

    let guild_opencve_frontend = opencve_frontend::OpenCVEFrontend::new(
        guild_config_data.opencve_frontend_url.as_deref(),
        None,
        &ctx_data.config.opencve_default_frontend,
    );

    let mut guild_page = CreateEmbed::default();
    guild_page.title("Settings for this server");
    guild_page.description(format!(
        "OpenCVE frontend URL: {} ([example]({}))",
        guild_opencve_frontend.base_url,
        guild_opencve_frontend.get_cve_url(COOL_CVE_EXAMPLE)
    ));
    pages.push(guild_page);

    let channels_config_data: Vec<ChannelConfig> = channel_config::table
        .filter(channel_config::guild_id.eq(&guild_id))
        .select(ChannelConfig::as_select())
        .get_results(&mut *database_connection)
        .await?;

    let channel_subscriptions_data: Vec<ChannelSubscription> = channel_subscription::table
        .filter(
            channel_subscription::channel_id.eq_any(
                channels_config_data
                    .iter()
                    .map(|channel| &channel.id)
                    .collect::<Vec<_>>(),
            ),
        )
        .select(ChannelSubscription::as_select())
        .get_results(&mut *database_connection)
        .await?;

    for channel_config_data in channels_config_data {
        let channel_opencve_frontend = opencve_frontend::OpenCVEFrontend::new(
            guild_config_data.opencve_frontend_url.as_deref(),
            channel_config_data.opencve_frontend_url.as_deref(),
            &ctx_data.config.opencve_default_frontend,
        );

        let channel_subscriptions = channel_subscriptions_data
            .iter()
            .filter(|sub| sub.channel_id.eq(&channel_config_data.id));

        let subscribed_vendors = channel_subscriptions
            .clone()
            .filter(|sub| sub.kind == SubscriptionKind::Vendor)
            .map(|sub| sub.name.as_str())
            .collect::<Vec<_>>();
        let subscribed_products = channel_subscriptions
            .clone()
            .filter(|sub| sub.kind == SubscriptionKind::Product)
            .map(|sub| sub.name.as_str())
            .collect::<Vec<_>>();

        const MAX_PAGE_DESCRIPTION_LENGTH: usize = 2000;

        let mut channel_pages: Vec<String> = vec![format!(
            "OpenCVE frontend URL: {} ([example]({}))\n\n",
            channel_opencve_frontend.base_url,
            channel_opencve_frontend.get_cve_url(COOL_CVE_EXAMPLE)
        )];

        for vendors_page in utils::format_long_string_list(
            subscribed_vendors.as_slice(),
            ", ",
            MAX_PAGE_DESCRIPTION_LENGTH,
        ) {
            channel_pages.push(format!("Subscribed vendors: ```\n{vendors_page}\n```"));
        }

        for products_page in utils::format_long_string_list(
            subscribed_products.as_slice(),
            ", ",
            MAX_PAGE_DESCRIPTION_LENGTH,
        ) {
            channel_pages.push(format!("Subscribed products: ```\n{products_page}\n```"));
        }

        for channel_page_content in channel_pages {
            let mut channel_page = CreateEmbed::default();
            channel_page.title(format!("Settings for <#{}>", channel_config_data.id));
            channel_page.description(channel_page_content);
            pages.push(channel_page);
        }
    }

    paginate::paginate(ctx, pages.iter_mut().collect::<Vec<_>>().as_slice()).await?;

    Ok(())
}
