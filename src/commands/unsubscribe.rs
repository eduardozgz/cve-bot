use crate::autocomplete;
use crate::models::channel_config::{ChannelConfig, SubscriptionKind};
use crate::{Context, Error};

#[poise::command(
    slash_command,
    guild_only,
    required_permissions = "ADMINISTRATOR",
    subcommands("vendor", "product"),
    rename = "unsubscribe"
)]
pub async fn command(_: Context<'_>) -> Result<(), Error> {
    Ok(())
}

/// Subscribes to CVEs of the specified vendor to receive alerts
#[poise::command(prefix_command, slash_command, ephemeral)]
async fn vendor(
    ctx: Context<'_>,
    #[description = "Vendor name(s) to unsubscribe"]
    #[autocomplete = "autocomplete::vendor"]
    names: String,
) -> Result<(), Error> {
    let ctx_data = ctx.data();
    let mut database_connection = ctx_data.db_pool.get().await?;

    let vendors = names
        .split(",")
        .into_iter()
        .map(|item| item.trim())
        .filter(|item| item.chars().count() != 0)
        .collect::<Vec<_>>();

    let channel_config_data = ChannelConfig::load(
        &ctx.channel_id().to_string(),
        &ctx.guild_id().unwrap().to_string(),
        &mut database_connection,
    )
    .await?;

    channel_config_data
        .unsubscribe(
            SubscriptionKind::Vendor,
            vendors.as_slice(),
            &mut database_connection,
        )
        .await?;

    let count = if vendors.contains(&"*") {
        String::from("all")
    } else {
        vendors.len().to_string()
    };

    ctx.send(|b| {
        b.content(format!(
            "Done, this channel has been unsubscribed from {count} vendors.",
        ))
    })
    .await?;

    Ok(())
}

/// Subscribes to CVEs of the specified product to receive alerts
#[poise::command(prefix_command, slash_command, ephemeral)]
async fn product(
    ctx: Context<'_>,
    #[description = "Product name(s) to unsubscribe"]
    #[autocomplete = "autocomplete::product"]
    names: String,
) -> Result<(), Error> {
    let ctx_data = ctx.data();
    let mut database_connection = ctx_data.db_pool.get().await?;

    let products = names
        .split(",")
        .into_iter()
        .map(|item| item.trim())
        .filter(|item| item.chars().count() != 0)
        .collect::<Vec<_>>();

    let channel_config_data = ChannelConfig::load(
        &ctx.channel_id().to_string(),
        &ctx.guild_id().unwrap().to_string(),
        &mut database_connection,
    )
    .await?;

    channel_config_data
        .unsubscribe(
            SubscriptionKind::Product,
            products.as_slice(),
            &mut database_connection,
        )
        .await?;

    let count = if products.contains(&"*") {
        String::from("all")
    } else {
        products.len().to_string()
    };

    ctx.send(|b| {
        b.content(format!(
            "Done, this channel has been unsubscribed from {count} products.",
        ))
    })
    .await?;

    Ok(())
}
