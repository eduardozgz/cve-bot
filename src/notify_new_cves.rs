use std::{sync::Arc, time::Duration};

use crate::{Context, Error, GlobalData};
use poise::{
    serenity_prelude::{Http, MessageBuilder},
    Framework,
};
use serde_json::{Value};

pub fn setup(global_data: GlobalData, http_client: Arc<Http>) -> () {
    tokio::spawn(async move {
        let mut interval = tokio::time::interval(Duration::from_secs(5));
        loop {
            interval.tick().await;
            let _ = notify_new_cves(Arc::clone(&global_data), Arc::clone(&http_client))
                .await
                .map_err(|error| {
                    eprintln!("Failed to run notify_new_cves task: {error:?}");
                });
        }
    });
}

pub async fn notify_new_cves(global_data: GlobalData, http_client: Arc<Http>) -> Result<(), Error> {
    todo!();
    Ok(())
}
