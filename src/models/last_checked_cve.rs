use crate::{schema::last_checked_cve, Error};
use chrono::{DateTime, Utc};
use diesel::prelude::*;
use diesel_async::{AsyncPgConnection, RunQueryDsl};

#[derive(Queryable, Selectable)]
#[diesel(table_name = last_checked_cve)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct LastCheckedCVE {
    pub id: i32,
    pub publish_date: DateTime<Utc>,
}

#[derive(Insertable, AsChangeset)]
#[diesel(table_name = last_checked_cve)]
pub struct NewLastCheckedCVE {
    pub publish_date: DateTime<Utc>,
}

impl LastCheckedCVE {
    /// Ensure that all necessary tables and basic data are created
    pub async fn get_last(
        database_connection: &mut AsyncPgConnection,
    ) -> Result<DateTime<Utc>, Error> {
        let last_checked_cve: LastCheckedCVE = last_checked_cve::table
            .filter(last_checked_cve::id.eq(1))
            .select(LastCheckedCVE::as_select())
            .get_result(database_connection)
            .await?;

        Ok(last_checked_cve.publish_date)
    }

    pub async fn set_last(
        publish_date: DateTime<Utc>,
        database_connection: &mut AsyncPgConnection,
    ) -> Result<(), Error> {
        todo!()
    }
}
