use poise::serenity_prelude::{self as serenity};

fn create_paginator_components(
    current_page: &usize,
    total_pages: &usize,
    page_counter_button_id: &String,
    prev_button_id: &String,
    next_button_id: &String,
) -> impl FnOnce(&mut serenity::CreateComponents) -> &mut serenity::CreateComponents {
    let current_page = current_page.to_owned();
    let total_pages = total_pages.to_owned();
    let page_counter_button_id = page_counter_button_id.to_owned();
    let prev_button_id = prev_button_id.to_owned();
    let next_button_id = next_button_id.to_owned();

    move |create_components_builder: &mut serenity::CreateComponents| {
        if total_pages > 1 {
            create_components_builder.create_action_row(|action_row| {
                action_row
                    .create_button(|button_builder: &mut serenity::CreateButton| {
                        button_builder
                            .custom_id(page_counter_button_id)
                            .disabled(true)
                            .label(format!("Page {} of {}", current_page + 1, total_pages))
                    })
                    .create_button(|b| b.custom_id(prev_button_id).emoji('◀'))
                    .create_button(|b| b.custom_id(next_button_id).emoji('▶'))
            });
        }

        create_components_builder
    }
}

pub async fn paginate(
    ctx: crate::Context<'_>,
    pages: &[&mut serenity::CreateEmbed],
) -> Result<(), serenity::Error> {
    let ctx_id = ctx.id();
    let page_counter_button_id = format!("{}:page-counter", ctx.id());
    let prev_button_id = format!("{}:prev-page", ctx.id());
    let next_button_id = format!("{}:next-page", ctx.id());

    let total_pages: usize = pages.len();
    let mut current_page: usize = 0;

    ctx.send(|reply_builder| {
        reply_builder
            .embed(|embed_builder| {
                embed_builder.0 = pages[current_page].0.to_owned();
                embed_builder
            })
            .components(create_paginator_components(
                &current_page,
                &total_pages,
                &page_counter_button_id,
                &prev_button_id,
                &next_button_id,
            ))
    })
    .await?;

    // Loop through incoming interactions with the navigation buttons
    while let Some(press) = serenity::CollectComponentInteraction::new(ctx)
        // We defined our button IDs to start with `ctx_id`. If they don't, some other command's
        // button was pressed
        .filter(move |press| press.data.custom_id.starts_with(&ctx_id.to_string()))
        // Timeout when no navigation button has been pressed for 24 hours
        .timeout(std::time::Duration::from_secs(3600 * 24))
        .await
    {
        // Depending on which button was pressed, go to next or previous page
        if press.data.custom_id == next_button_id {
            current_page += 1;
            if current_page >= pages.len() {
                current_page = 0;
            }
        } else if press.data.custom_id == prev_button_id {
            current_page = current_page.checked_sub(1).unwrap_or(pages.len() - 1);
        } else {
            // This is an unrelated button interaction
            continue;
        }

        // Update the message with the new page contents
        press
            .create_interaction_response(ctx, |create_interaction_response| {
                create_interaction_response
                    .kind(serenity::InteractionResponseType::UpdateMessage)
                    .interaction_response_data(|b| {
                        b.embed(|embed_builder| {
                            embed_builder.0 = pages[current_page].0.to_owned();
                            embed_builder
                        })
                        .components(create_paginator_components(
                            &current_page,
                            &total_pages,
                            &page_counter_button_id,
                            &prev_button_id,
                            &next_button_id,
                        ))
                    })
            })
            .await?;
    }

    Ok(())
}
