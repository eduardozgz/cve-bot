use crate::{schema::guild_config, Error};
use diesel::prelude::*;
use diesel_async::{AsyncPgConnection, RunQueryDsl}; 

#[derive(Queryable, Selectable)]
#[diesel(table_name = guild_config)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct GuildConfig {
    pub id: String,
    pub opencve_frontend_url: Option<String>,
}

#[derive(Insertable, AsChangeset)]
#[diesel(table_name = guild_config)]
pub struct NewGuildConfig<'a> {
    pub id: &'a str,
    pub opencve_frontend_url: Option<&'a str>,
}

impl GuildConfig {
    /// Ensure that all necessary tables and basic data are created
    pub async fn load(guild_id: &String, database_connection: &mut AsyncPgConnection) -> Result<GuildConfig, Error> {
        let default_guild_config = NewGuildConfig {
            id: guild_id,
            opencve_frontend_url: None,
        };

        diesel::insert_into(guild_config::table)
            .values(&default_guild_config)
            .on_conflict(guild_config::id)
            .do_nothing()
            .execute(database_connection)
            .await?;

        let guild_config_data = guild_config::table
            .filter(guild_config::id.eq(&guild_id))
            .select(GuildConfig::as_select())
            .get_result(database_connection)
            .await?;

        Ok(guild_config_data)
    }
}
