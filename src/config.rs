use std::env;

use poise::serenity_prelude::GuildId;

pub struct Config {
    pub discord_token: String,
    pub opencve_default_frontend: String,
    pub opencve_database_url: String,
    pub database_url: String,
    pub guild_to_deploy_application_commands: Option<GuildId>,
}

impl Config {
    pub fn build_from_env() -> Config {
        dotenvy::dotenv().ok();

        Config {
            discord_token: env::var("DISCORD_TOKEN").expect("Discord token"),
            database_url: env::var("DATABASE_URL").expect("Postgres database URL"),
            opencve_database_url: env::var("OPENCVE_DATABASE_URL")
                .expect("Postgres database URL for OPENCVE"),
            opencve_default_frontend: env::var("OPENCVE_DEFAULT_FRONTEND")
                .unwrap_or(String::from("https://www.opencve.io")),
            guild_to_deploy_application_commands: env::var("GUILD_TO_DEPLOY_APPLICATION_COMMANDS")
                .ok()
                .and_then(|str_id| {
                    if str_id.len() == 0 {
                        None
                    } else {
                        let parsed_guild_id: u64 = str_id
                            .parse()
                            .expect("Invalid guild ID for GUILD_TO_DEPLOY_APPLICATION_COMMANDS");

                        Some(GuildId(parsed_guild_id))
                    }
                }),
        }
    }
}
